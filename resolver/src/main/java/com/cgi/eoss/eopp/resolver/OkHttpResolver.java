/*
 * Copyright 2020 The libeopp Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.cgi.eoss.eopp.resolver;

import com.cgi.eoss.eopp.resource.EoppOkHttpResource;
import com.cgi.eoss.eopp.resource.EoppResource;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;

import java.net.URI;
import java.util.Objects;
import java.util.Set;

/**
 * <p>{@link Resolver} implementation for resources from an HTTP(S) server.</p>
 *
 * @see EoppOkHttpResource
 */
public class OkHttpResolver implements Resolver {

    private static final OkHttpClient DEFAULT_OKHTTP_CLIENT = new OkHttpClient.Builder().build();

    private static final Set<String> PROTOCOLS = Set.of("http", "https");

    private final ClientFactory clientFactory;

    /**
     * <p>Construct a new OkHttpResolver with a default {@link OkHttpClient} configuration.</p>
     */
    public OkHttpResolver() {
        this(DEFAULT_OKHTTP_CLIENT);
    }

    /**
     * <p>Construct a new OkHttpResolver using a specific {@link OkHttpClient} to resolve resources.</p>
     */
    public OkHttpResolver(OkHttpClient httpClient) {
        this(url -> httpClient);
    }

    /**
     * <p>Construct a new OkHttpResolver with the {@link OkHttpClient} use to resolve resources generated by the given
     * {@link ClientFactory} for each URL.</p>
     */
    public OkHttpResolver(ClientFactory clientFactory) {
        this.clientFactory = clientFactory;
    }

    @Override
    public boolean canResolve(URI uri) {
        return PROTOCOLS.contains(uri.getScheme());
    }

    @Override
    public EoppResource resolveUri(URI uri) {
        return new EoppOkHttpResource(clientFactory.build(Objects.requireNonNull(HttpUrl.get(uri))), Objects.requireNonNull(HttpUrl.get(uri)));
    }

    /**
     * <p>An extension point to allow customisation (based on the resource URI being requested) of the
     * {@link OkHttpClient} used by an {@link OkHttpResolver}.</p>
     */
    @FunctionalInterface
    public interface ClientFactory {
        /**
         * @return An OkHttpClient configured to access the given URL.
         */
        OkHttpClient build(HttpUrl httpUrl);
    }

}
