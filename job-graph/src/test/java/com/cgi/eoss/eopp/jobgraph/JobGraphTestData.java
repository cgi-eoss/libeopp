package com.cgi.eoss.eopp.jobgraph;

import com.cgi.eoss.eopp.identifier.Identifier;
import com.cgi.eoss.eopp.workflow.DataSources;
import com.cgi.eoss.eopp.workflow.Input;
import com.cgi.eoss.eopp.workflow.Output;
import com.cgi.eoss.eopp.workflow.Parameter;
import com.cgi.eoss.eopp.workflow.Step;
import com.cgi.eoss.eopp.workflow.StepConfiguration;
import com.cgi.eoss.eopp.workflow.Workflow;
import com.google.common.collect.ImmutableList;

public class JobGraphTestData {
    static final com.cgi.eoss.eopp.workflow.Step firstStep = Step.newBuilder()
            .setIdentifier(Identifier.newBuilder().setIdentifier("first").setVersion("1.0.0").build())
            .addParameters(Parameter.newBuilder().setIdentifier("SOURCED_PARAM").setMinOccurs(1).build())
            .addInputs(Input.newBuilder().setIdentifier("in1").setMinOccurs(1).build())
            .addOutputs(Output.newBuilder().setIdentifier("out1").setMinOccurs(1).build())
            .build();
    private static final Step trimmedStep = Step.newBuilder()
            .setIdentifier(Identifier.newBuilder().setIdentifier("trimmed").setVersion("1.0.0").build())
            .addParameters(Parameter.newBuilder().setIdentifier("UNPROVIDED_PARAM").setMinOccurs(0).build())
            .addInputs(Input.newBuilder().setIdentifier("in1").setMinOccurs(1).build())
            .addOutputs(Output.newBuilder().setIdentifier("out1").setMinOccurs(1).build())
            .build();
    private static final Step secondStep = Step.newBuilder()
            .setIdentifier(Identifier.newBuilder().setIdentifier("second").setVersion("1.0.0").build())
            .addParameters(Parameter.newBuilder().setIdentifier("DEFAULTED_PARAM").setMinOccurs(1).addDefaultValues("default").build())
            .addParameters(Parameter.newBuilder().setIdentifier("HARDCODED_PARAM").setMinOccurs(1).build())
            .addInputs(Input.newBuilder().setIdentifier("in1").setMinOccurs(1).build())
            .addOutputs(Output.newBuilder().setIdentifier("out1").setMinOccurs(1).build())
            .build();
    private static final Step skippedStep = Step.newBuilder()
            .setIdentifier(Identifier.newBuilder().setIdentifier("skipped").setVersion("1.0.0").build())
            .addInputs(Input.newBuilder().setIdentifier("in1").setMinOccurs(2).build())
            .addOutputs(Output.newBuilder().setIdentifier("out1").setMinOccurs(1).build())
            .build();
    // A fairly comprehensive workflow to exercise the various node/edge conditions, also used in StepInstanceExpanderNestedWorkflowTest
    static final Workflow workflow = Workflow.newBuilder()
            .addParameters(Parameter.newBuilder().setIdentifier("sourced_param").setMinOccurs(0).build())
            .addInputs(Input.newBuilder().setIdentifier("provided_workflow_input").setMinOccurs(1).build())
            .addInputs(Input.newBuilder().setIdentifier("unprovided_workflow_input").setMinOccurs(1).build())
            .addOutputs(Output.newBuilder().setIdentifier("workflow_output").setMinOccurs(1)
                    .setSources(DataSources.newBuilder()
                            .addStepOutputs(DataSources.StepOutput.newBuilder().setStepIdentifier("second-step").setOutputIdentifier("out1").build())
                            .addStepOutputs(DataSources.StepOutput.newBuilder().setStepIdentifier("no-param-successor-step").setOutputIdentifier("out1").build())
                            .addStepOutputs(DataSources.StepOutput.newBuilder().setStepIdentifier("skipped-step").setOutputIdentifier("out1").build())
                            .build())
                    .build())
            .addStepConfigurations(StepConfiguration.newBuilder()
                    .setIdentifier("first-step")
                    .setStep(firstStep)
                    .addParameterLinks(StepConfiguration.ParameterLink.newBuilder()
                            .setIdentifier("SOURCED_PARAM")
                            .setWorkflowParameter("sourced_param").build()
                    )
                    .addInputLinks(StepConfiguration.InputLink.newBuilder()
                            .setIdentifier("in1")
                            .setSources(DataSources.newBuilder()
                                    .addWorkflowInputs("provided_workflow_input").build()).build()
                    )
                    .build())
            .addStepConfigurations(StepConfiguration.newBuilder()
                    .setIdentifier("no-param-step")
                    .setStep(trimmedStep)
                    .addParameterLinks(StepConfiguration.ParameterLink.newBuilder()
                            .setIdentifier("UNPROVIDED_PARAM")
                            .setWorkflowParameter("unprovided_param")
                            .setSkipStepIfEmpty(true).build()
                    )
                    .addInputLinks(StepConfiguration.InputLink.newBuilder()
                            .setIdentifier("in1")
                            .setSources(DataSources.newBuilder()
                                    .addWorkflowInputs("provided_workflow_input").build()).build()
                    )
                    .build())
            .addStepConfigurations(StepConfiguration.newBuilder()
                    .setIdentifier("no-param-successor-step")
                    .setStep(trimmedStep)
                    .addInputLinks(StepConfiguration.InputLink.newBuilder()
                            .setIdentifier("in1")
                            .setSources(DataSources.newBuilder()
                                    .addStepOutputs(DataSources.StepOutput.newBuilder()
                                            .setStepIdentifier("no-param-step")
                                            .setOutputIdentifier("out1").build()).build()).build()
                    )
                    .build())
            .addStepConfigurations(StepConfiguration.newBuilder()
                    .setIdentifier("trimmed-step")
                    .setStep(trimmedStep)
                    .addInputLinks(StepConfiguration.InputLink.newBuilder()
                            .setIdentifier("in1")
                            .setSources(DataSources.newBuilder()
                                    .addWorkflowInputs("unprovided_workflow_input").build()).build()
                    )
                    .build())
            .addStepConfigurations(StepConfiguration.newBuilder()
                    .setIdentifier("second-step")
                    .setStep(secondStep)
                    .addParameterLinks(StepConfiguration.ParameterLink.newBuilder()
                            .setIdentifier("HARDCODED_PARAM")
                            .addAllHardcodedValues(ImmutableList.of("a", "list", "of", "strings"))
                            .build()
                    )
                    .addInputLinks(StepConfiguration.InputLink.newBuilder()
                            .setIdentifier("in1")
                            .setSources(DataSources.newBuilder()
                                    .addStepOutputs(DataSources.StepOutput.newBuilder()
                                            .setStepIdentifier("first-step")
                                            .setOutputIdentifier("out1").build()).build()).build()
                    )
                    .build())
            .addStepConfigurations(StepConfiguration.newBuilder()
                    .setIdentifier("skipped-step")
                    .setStep(skippedStep)
                    .addInputLinks(StepConfiguration.InputLink.newBuilder()
                            .setIdentifier("in1")
                            .setSources(DataSources.newBuilder()
                                    .addStepOutputs(DataSources.StepOutput.newBuilder()
                                            .setStepIdentifier("first-step")
                                            .setOutputIdentifier("out1").build()).build()).build()
                    )
                    .build())
            .build();
}
